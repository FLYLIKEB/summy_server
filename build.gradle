buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4' apply false
    id 'io.spring.dependency-management' version '1.1.7' apply false
}

allprojects {
    group = 'com.jwp'
    version = '0.0.1-SNAPSHOT'

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }
    
    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
        unitTestImplementation {
            extendsFrom testImplementation
        }
        integrationTestImplementation {
            extendsFrom testImplementation
        }
    }
    
    sourceSets {
        unitTest {
            compileClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.main.output
        }
        integrationTest {
            compileClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.main.output
        }
    }
    
    dependencies {
        // Spring Boot
        implementation 'org.springframework.boot:spring-boot-starter'
        
        // Lombok
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
        
        // Bean Validation
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        
        // Test
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        unitTestImplementation 'org.springframework.boot:spring-boot-starter-test'
        integrationTestImplementation 'org.springframework.boot:spring-boot-starter-test'
    }
    
    tasks.named('test') {
        useJUnitPlatform()
    }
    
    // 단위 테스트 태스크 정의
    task unitTest(type: Test) {
        description = '단위 테스트만 실행합니다.'
        group = 'verification'
        
        testClassesDirs = sourceSets.unitTest.output.classesDirs
        classpath = sourceSets.unitTest.runtimeClasspath
        
        testLogging {
            events "passed", "skipped", "failed"
        }
    }
    
    // 통합 테스트 태스크 정의 
    task integrationTest(type: Test) {
        description = '통합 테스트만 실행합니다.'
        group = 'verification'
        
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
        
        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}

// core 모듈 관련 설정
project(':core') {
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    
    bootJar { enabled = false }
    jar { enabled = true }
    
    dependencies {
        api 'org.springframework.boot:spring-boot-starter-data-jpa'
        api 'org.springframework.boot:spring-boot-starter-data-redis'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        // QueryDSL 의존성 추가
        implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
        annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
        annotationProcessor "jakarta.annotation:jakarta.annotation-api"
        annotationProcessor "jakarta.persistence:jakarta.persistence-api"
        
        // 테스트용 인메모리 DB
        runtimeOnly 'com.h2database:h2'
        // 운영용 DB 드라이버
        runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    }
    
    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }
    
    def querydslDir = "$buildDir/generated/querydsl"

    tasks.withType(JavaCompile).configureEach {
        options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
    }

    sourceSets {
        main.java.srcDir querydslDir
    }
    
    tasks.named('clean') {
        doLast {
            file(querydslDir).deleteDir()
        }
    }
    
    // Q클래스 생성 태스크
    tasks.register('generateQClass', JavaCompile) {
        source = sourceSets.main.java
        classpath = configurations.compileClasspath
        options.annotationProcessorPath = configurations.annotationProcessor
        options.compilerArgs = [
                "-proc:only",
                "-processor", "com.querydsl.apt.jpa.JPAAnnotationProcessor"
        ]
        destinationDirectory = file(querydslDir)

        doFirst {
            println "Q클래스 생성 시작..."
            file(querydslDir).mkdirs()
        }

        doLast {
            println "Q클래스 생성 완료. 생성된 파일 목록:"
            fileTree(dir: querydslDir, include: '**/*.java').files.each {
                println "  - ${it.name}"
            }
        }
    }
    
    // compileQuerydsl 태스크 추가 (하위 호환성을 위해)
    task compileQuerydsl(dependsOn: generateQClass) {
        group = 'build'
        description = 'QueryDSL Q클래스 생성 (generateQClass의 별칭)'
    }
}

// api 모듈 관련 설정
project(':api') {
    dependencies {
        implementation project(':core')
        
        // Web
        implementation 'org.springframework.boot:spring-boot-starter-web'
        
        // Security
        implementation 'org.springframework.boot:spring-boot-starter-security'
    }
}
